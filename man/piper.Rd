% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/piper.R
\name{piper}
\alias{piper}
\title{piper}
\description{
Deep asymmetric object extraction.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-piper-new}{\code{piper$new()}}
\item \href{#method-piper-compute}{\code{piper$compute()}}
\item \href{#method-piper-push}{\code{piper$push()}}
\item \href{#method-piper-load}{\code{piper$load()}}
\item \href{#method-piper-map_pipeline}{\code{piper$map_pipeline()}}
\item \href{#method-piper-compute_stack}{\code{piper$compute_stack()}}
\item \href{#method-piper-get_stack}{\code{piper$get_stack()}}
\item \href{#method-piper-get_namespace}{\code{piper$get_namespace()}}
\item \href{#method-piper-update_namespace}{\code{piper$update_namespace()}}
\item \href{#method-piper-set_env}{\code{piper$set_env()}}
\item \href{#method-piper-get_env}{\code{piper$get_env()}}
\item \href{#method-piper-memory_map}{\code{piper$memory_map()}}
\item \href{#method-piper-clone}{\code{piper$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-new"></a>}}
\if{latex}{\out{\hypertarget{method-piper-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$new(dir = character(0))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{target directory of computational blocks}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-compute"></a>}}
\if{latex}{\out{\hypertarget{method-piper-compute}{}}}
\subsection{Method \code{compute()}}{
execute a pipe block from the top of the stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$compute(name, .debug = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{a computational block to execute}

\item{\code{.debug}}{should debug mode get triggered, DEFAULT: FALSE}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-push"></a>}}
\if{latex}{\out{\hypertarget{method-piper-push}{}}}
\subsection{Method \code{push()}}{
insert a pipe block into the top of the stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$push(expr, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{expression block to insert}

\item{\code{...}}{a list of other functional arguments}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-load"></a>}}
\if{latex}{\out{\hypertarget{method-piper-load}{}}}
\subsection{Method \code{load()}}{
load a module into local memory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$load(module, from, .env = self$get_env(), src = "R++", dir = "modules")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{module}}{a pipe module id}

\item{\code{from}}{the module root directory}

\item{\code{.env}}{local pipe environment}

\item{\code{src}}{binary type}

\item{\code{dir}}{the module subdirectory}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-map_pipeline"></a>}}
\if{latex}{\out{\hypertarget{method-piper-map_pipeline}{}}}
\subsection{Method \code{map_pipeline()}}{
map modules pipeline
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$map_pipeline()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-compute_stack"></a>}}
\if{latex}{\out{\hypertarget{method-piper-compute_stack}{}}}
\subsection{Method \code{compute_stack()}}{
pop block from stack
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$compute_stack(name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{a block id}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-get_stack"></a>}}
\if{latex}{\out{\hypertarget{method-piper-get_stack}{}}}
\subsection{Method \code{get_stack()}}{
fetch stack namespace
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$get_stack()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-get_namespace"></a>}}
\if{latex}{\out{\hypertarget{method-piper-get_namespace}{}}}
\subsection{Method \code{get_namespace()}}{
fetch block namespace
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$get_namespace(block_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{block_id}}{a block id}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-update_namespace"></a>}}
\if{latex}{\out{\hypertarget{method-piper-update_namespace}{}}}
\subsection{Method \code{update_namespace()}}{
update block namespace
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$update_namespace(block_id, members)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{block_id}}{a block id}

\item{\code{members}}{block attributes}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-set_env"></a>}}
\if{latex}{\out{\hypertarget{method-piper-set_env}{}}}
\subsection{Method \code{set_env()}}{
initialize local environment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$set_env(.env)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.env}}{a block id}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-get_env"></a>}}
\if{latex}{\out{\hypertarget{method-piper-get_env}{}}}
\subsection{Method \code{get_env()}}{
fetch local environment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$get_env()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-memory_map"></a>}}
\if{latex}{\out{\hypertarget{method-piper-memory_map}{}}}
\subsection{Method \code{memory_map()}}{
shallow copy of local environment to global environment
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$memory_map(expr, .env)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{an expression block}

\item{\code{.env}}{local environment}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-piper-clone"></a>}}
\if{latex}{\out{\hypertarget{method-piper-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{piper$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
